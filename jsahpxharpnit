#!/usr/bin/env starperl

=head1 NAME

jsahpxharpnit - Submit a HARP HEALPix job to the CADC GridEngine for JSA processing.

=head1 SYNOPSIS

  jsahpxharpnit -ut 20080705

=head1 DESCRIPTION

Submits a processing job to the CADC data processing system.

=head1 OPTIONS

=over 4

=item B<-debug>

Enable debug messages and do not actually submit a processing job. Also
disables emailing.

=item B<-help>

Print help information.

=item B<-man>

Print full manual.

=item B<-noemail>

By default a mail message is sent with the job details. If this option is given
the message will be printed to standard output instead.

=item B<-priority>

Used to override the default priority for all jobs. Must be an integer between
-1023 and 1024. The default will be 1.

=item B<-project>

Name of a project to be processed which and must be accompanied by the  "-ut" option.

=item B<-queue>

Can be used to override the queue that should be used for the data processing
at CADC. Can be left unset. Useful values are "JAC_REPROC" for low priority
reprocessing.

=item B<-ut>

Specify the UT date to be processed.

=item B<-version>

Print version information.

=back

=cut


use JAC::Setup qw/ omp sybase /;

use strict;
use warnings;

use JSA::Submission qw/%JUNK_OBSIDSS
                       adjust_header adjust_header_freq assign_to_group
                       determine_frame_class determine_resource_requirement
                       echo_messages find_observations get_obsidss
                       log_message obs_is_fts2_or_pol2_RECIPE
                       prepare_archive_db send_log_email submit_jobs
                       write_log_file/;

use OMP::Info::Obs;
use OMP::Constants qw/ :obs /;

use Getopt::Long;
use Pod::Usage;

prepare_archive_db();

# Handle command-line options.
my ( $help, $man, $project, $ut, $version, $priority, $noemail, $debug, $queue );
my $status = GetOptions( "help"      => \$help,
                         "man"       => \$man,
                         "project=s" => \$project,
                         "ut=s"      => \$ut,
                         "priority=i"=> \$priority,
                         "version"   => \$version,
                         "debug"     => \$debug,
                         "noemail"   => \$noemail,
                         "queue=s"     => \$queue,
                       );

pod2usage( 1 ) if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;

if( $version ) {
  print "Submit a HPX observation job to the CADC GridEngine for JSA processing.\n";
  print " Source code revision: 0.01\n";
  exit;
}

echo_messages($noemail || $debug);

$project = uc($project) if defined $project;
my ($mode, $grp) = find_observations($ut, $project, $priority, 'jsahpxharpnit');

die 'This script should not be used in project mode'
  if $mode eq 'project';

if( scalar( @{$grp->obs} ) == 0 ) {
  log_message( "No observations were retrieved from the database.\n");
} else {
  log_message( scalar( @{$grp->obs} ) . " observations were retrieved from the database.\n\n");

  # Group information hash for submit_jobs().
  my %groups;

  foreach my $obs ( $grp->obs ) {

    my $hdr = $obs->hdrhash;

    my $obstype = uc( $hdr->{'OBS_TYPE'} );
    my $instrume = uc( $hdr->{'INSTRUME'} );
    my $backend = uc( $hdr->{'BACKEND'} );

    # No reduction recipe at CADC yet for (FTS|POL)-2.
    if ( obs_is_fts2_or_pol2_RECIPE( $backend, $obs->drrecipe() ) ) {

      log_message( sprintf "Skipped observation with OBSID %s from FTS-2/POL-2 reduction %s\n",
                      $obs->obsid(),
                      'based on recipe value'
                  );
      next;
    }

    # This script is only for HARP.
    if ($instrume ne 'HARP') {
      log_message( "Instrument $instrume currently not supported for HPX nit processing\n");
      next;
    }

    # We process SCIENCE and POINTING for SCUBA-2, and SCIENCE for
    # ACSIS and the DAS.
    unless (
                ( $instrume eq 'SCUBA-2' &&
                      ( $obstype eq 'SCIENCE' ||
                        $obstype eq 'POINTING' ) ) ||
                ( $backend eq 'ACSIS' && $obstype eq 'SCIENCE' ) ||
                ( $backend eq 'DAS'   && $obstype eq 'SCIENCE' )
           ) {
      next;
    }

    adjust_header($hdr);

    my $frameclass = determine_frame_class($obs);

    # Current default values for this observation in group handling and
    # recipe submission
    my %current;

    # If the data are not good then do not include them.
    if ($obs->status != OMP__OBS_GOOD ) {
      log_message("Observation is not good and so will not be processed\n");
      next;
    }

    $current{'dprecipe'} = determine_resource_requirement($obs);

    # All observations are processed with the same recipe.
    $current{'drparams'} = 'REDUCE_SCIENCE_LEGACY';

    # Placeholder for addition of recpars once they are added to ORAC-DR.
    # $current{'recpars'} = '???.ini';

    my @subsystems = $obs->subsystems;

    for my $subsys (@subsystems) {
      my @all_obsidss = $subsys->obsidss;
      my $obsidss = $all_obsidss[0];

      die "Error determining an OBSIDSS for an observation. Can not proceed\n"
        unless defined $obsidss;

      # local copies
      my %obsidss_current = %current;

      if (exists $JUNK_OBSIDSS{$obsidss}) {
	log_message( "Subsystem $obsidss will not be processed in any way\n");
	next;
      }

      my $subsyshdr = $subsys->hdrhash;

      adjust_header_freq($subsyshdr);

      assign_to_group( $instrume, $subsys->obsid, $frameclass, undef,
		       $subsyshdr, \%obsidss_current, [$subsys->filename], \%groups );
    }
  }

  submit_jobs(\%groups, undef, $mode, $priority, $queue, $debug);
}

write_log_file('jsasubmit-hpx-harp-nit', $ut, $project) unless $debug;

send_log_email('CADC HPX HARP Night Processing', $ut, $project)
    unless $noemail || $debug;

exit;

=head1 COPYRIGHT

Copyright (C) 2009-2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful,but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut
