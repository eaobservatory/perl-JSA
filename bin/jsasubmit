#!/usr/bin/env starperl

=head1 NAME

jsasubmit - Submit a job to the CADC GridEngine for JSA processing.

=head1 SYNOPSIS

    jsasubmit -ut 20080705

=head1 DESCRIPTION

Submits a processing job to the CADC data processing system.

=head1 OPTIONS

=over 4

=item B<--dry-run>

Enable debug messages and do not actually submit a processing job.

=item B<-help>

Print help information.

=item B<--allow-update>

Allow updating of jobs rather than only creating new jobs.

=item B<--jp-logging>

Set a Python logging level (e.g. INFO or DEBUG) for logging from the JSA Proc system.

=item B<-man>

Print full manual.

=item B<-priority>

Used to override the default priority for all jobs. Must be an integer between
-1023 and 1024. The default will be 1.

=item B<-project>

Name of a project to be processed.  Files are not verified to be present at
CADC in this mode.  If the "-ut" option is also supplied then night mode
will be used but selecting observations from this project.

=item B<-queue>

Can be used to override the queue that should be used for the data processing
at CADC. Can be left unset. Useful values are "JAC_REPROC" for low priority
reprocessing.

=item B<--task>

Name of data processing task. [default: "jcmt-nightly"]

=item B<-ut>

Specify the UT date to be processed.
Files to be processed are verified to be at CADC before a job will be submitted.

=item B<-version>

Print version information.

=item B<--delete-other>

If in update mode (with C<--allow-update>) then try to delete non-grouped
versions of grouped jobs and grouped versions of non-grouped jobs.  (Note
that groups split due to containing multiple projects are automatically
deleted regardless of this option in update mode.)

=back

=cut


use JAC::Setup qw/omp/;

use strict;
use warnings;

use JSA::Submission qw/
    %DR_RECIPES %BAD_OBSIDSS %JUNK_OBSIDSS
    adjust_header adjust_header_freq assign_to_group
    determine_frame_class
    echo_messages find_observations
    log_message obs_is_fts2_or_pol2_RECIPE
    prepare_archive_db
    write_log_file/;
use JSA::Proc qw/add_jsa_proc_jobs get_obs_preproc_recipe/;

use OMP::Info::Obs;
use OMP::Constants qw/:obs/;

use Getopt::Long;
use Pod::Usage;

prepare_archive_db();

# Handle command-line options.
my ($help, $man, $project, $ut, $version, $priority, $dry_run,
    $queue, $task, $allow_update, $jp_logging, $delete_other);

my $status = GetOptions(
    "help"      => \$help,
    "man"       => \$man,
    "project=s" => \$project,
    "ut=s"      => \$ut,
    "priority=i"=> \$priority,
    "version"   => \$version,
    "dry-run"   => \$dry_run,
    "queue=s"   => \$queue,
    'task=s'    => \$task,
    'allow-update' => \$allow_update,
    "jp-logging=s" => \$jp_logging,
    'delete-other' => \$delete_other,
);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($version) {
    print "Submit a job to the CADC GridEngine for JSA processing.\n";
    print " Source code revision: 0.01\n";
    exit;
}

if (not defined $task) {
    if (defined $project) {
        die 'Task name not given';
    }
    else {
        $task = 'jcmt-nightly';
    }
}

echo_messages(1);

$project = uc($project) if defined $project;
my ($mode, $grp) = find_observations($ut, $project, $priority, 'jsasubmit');

if (scalar(@{$grp->obs}) == 0) {
    log_message("No observations were retrieved from the database.\n");
}
else {
    log_message(scalar(@{$grp->obs}) . " observations were retrieved from the database.\n\n");

    my %options;
    if (defined $allow_update) {
        $options{'allow_update'} = 1;
        if (defined $dry_run) {
            $options{'jsa_proc_dry_run'} = 1;
            $dry_run = undef;
        }
    }
    if (defined $jp_logging) {
        $options{'jsa_proc_logging'} = $jp_logging;
    }

    # Group information hash for add_jsa_proc_jobs.
    my %groups;

    foreach my $obs ($grp->obs) {
        my $hdr = $obs->hdrhash;

        my $obstype = uc( $hdr->{'OBS_TYPE'} );
        my $instrume = uc( $hdr->{'INSTRUME'} );
        my $backend = uc( $hdr->{'BACKEND'} );
        my $project = uc( $hdr->{'PROJECT'} );

        # Current default values for this observation in group handling and
        # recipe submission
        my $not_in_group;
        my %current = (
            mode => $mode,
        );

        # Don't submit EC jobs for processing except for special calibration observation project EC05
        # TEMPORARY: also include EC36 to get namakanui commissioning.
        if ($project =~ /EC/i) {
            unless ($project =~ /EC05/i or $project =~ /EC36/) {
                log_message(sprintf "Skipped observation with OBSID %s because it is from engineering/comissioning project %s.\n",
                                    $obs->obsid(), $project);
                next;
            }

            # Do not group E&C observations, to avoid having to try to split
            # the groups later.
            $not_in_group = 1;
            $current{'mode'} = 'obs';
        }

        # No reduction recipe at CADC yet for (FTS|POL)-2.
        if (obs_is_fts2_or_pol2_RECIPE($backend, $obs->drrecipe())) {
            log_message(sprintf "Skipped observation with OBSID %s from FTS-2/POL-2 reduction %s\n",
                                $obs->obsid(), 'based on recipe value');
            next;
        }

        # We process SCIENCE and POINTING for SCUBA-2, and SCIENCE for
        # ACSIS and the DAS.
        unless (($instrume eq 'SCUBA-2' &&
                     ($obstype eq 'SCIENCE' ||
                      $obstype eq 'POINTING')) ||
                ($backend eq 'ACSIS' && $obstype eq 'SCIENCE') ||
                ($backend eq 'DAS'   && $obstype eq 'SCIENCE')) {
          next;
        }

        adjust_header($hdr);

        my $frameclass = determine_frame_class($obs);

        # If the observation is NOT GOOD we don't want to combine it with other
        # members of the group so we just want to submit it standalone.
        # REJECT status could arguably be included in full coadds but for now
        # we only combine GOOD.

        # Observations to be processed standalone need to be reduced in "obs" mode.

        # We do not process bad observations in PROJECT mode since we assume they have
        # already been done in NIGHT mode

        if ($obs->status != OMP__OBS_GOOD) {
            # Do not care about group so add a disambiguater based on obsid
            log_message( "Observation with OBSID ". $obs->obsid ." is not good so will not be included in a group\n" );
            $not_in_group = 1;
            $current{mode} = "obs";

            # if the data are truly JUNK we do not want to ask CADC to process the data at
            # all since the chances are excellent that the pipeline will fail
            if ( $obs->status == OMP__OBS_JUNK ) {
                log_message("Observation is junk and so will not be processed at all\n");
                next;
            }

            # Skip to next observation unless we are in night mode
            if ($mode ne "night") {
                log_message("Not including this observation in $mode processing\n");
                next;
            }
        }

        # Set up recipe parameters and recipe overrides.  UPDATED: we
        # now want to do this for all observations, including JCTMCAL
        # pointings and observations of standards.
        my $pid = $obs->projectid;
        if (defined $pid) {
          # Override the recipe?
          if ( exists $DR_RECIPES{$pid} ) {
            $current{drparams} = $DR_RECIPES{$pid};
          }

          # For historical use: if the project is 'CAL' we still want
          # to use 'JCMTCAL' as the recipe parameter file.
          my $recparstring = "recpars-$pid.ini";

          if ($pid eq 'CAL') {
            $recparstring = "recpars-JCMTCAL.ini";
          }
          # We use this for all modes since the parameter file is relevant
          # for both night and project processing.
          $current{recpars} = $recparstring;
        }

        $current{preproc} = get_obs_preproc_recipe($obs->obsid(), \%options);

        my @subsystems = $obs->subsystems;

        for my $subsys (@subsystems) {
            my @all_obsidss = $subsys->obsidss;
            my $obsidss = $all_obsidss[0];

            die "Error determining an OBSIDSS for an observation. Can not proceed\n"
                unless defined $obsidss;

            # local copies
            my $obsidss_not_in_group = $not_in_group;
            my %obsidss_current = %current;

            if (exists $JUNK_OBSIDSS{$obsidss}) {
                log_message( "Subsystem $obsidss will not be processed in any way\n");
                next;
            }

            if (exists $BAD_OBSIDSS{$obsidss}) {
                log_message( "Subsystem $obsidss should not be included in group processing\n" );
                next if $mode ne "night";
                $obsidss_not_in_group = 1;
                $obsidss_current{mode} = "obs";
            }

            my $subsyshdr = $subsys->hdrhash;

            adjust_header_freq($subsyshdr);

            assign_to_group($instrume, $subsys->obsid, $frameclass, $obsidss_not_in_group,
                            $subsyshdr, \%obsidss_current, [$subsys->filename], \%groups,
                            undef, $task, 0, undef, $obsidss, $mode );
        }
    }

    my %to_delete = ();

    break_multi_project_groups(\%groups, $options{'allow_update'}, \%to_delete);

    if ($delete_other) {
        die 'Cannot delete other groups without --allow-update'
            unless $options{'allow_update'};

        delete_other_groups(\%groups, \%to_delete);
    }

    add_jsa_proc_jobs(\%groups, $mode, $priority, $dry_run, %options);
}

write_log_file('jsasubmit', $ut, $project) unless $dry_run;

exit;


# Break groups with multiple incompatible elements:
# different projects, or different recipes.
sub break_multi_project_groups {
    my $groups = shift;
    my $allow_update = shift;
    my $to_delete = shift;

    my @tags = keys %$groups;

    foreach my $tag (@tags) {
        my $group = $groups->{$tag};
        my $subgroups = $group->{'subgroups'};
        next unless $subgroups;

        my %projects = ();
        my %recipes = ();
        foreach my $key (keys %$subgroups) {
            my $subgroup = $subgroups->{$key};
            $projects{$subgroup->{'project'}} = 1;
            $recipes{$subgroup->{'grouping_recipe'}} = 1;
        }

        if ((1 < scalar keys %projects) or
                (1 < scalar keys %recipes)) {
            # Group has multiple projects and/or recipes:
            # replace it with its subgroups.
            $groups->{$_} = $subgroups->{$_} foreach keys %$subgroups;
            if ($allow_update) {
                $group->{'files'} = [];
                delete $group->{'subgroups'};
            }
            else {
                delete $groups->{$tag};
            }
        }
        else {
            # Group has only one project: remove the subgroups.
            $to_delete->{$_} = 1 foreach keys %$subgroups;
            delete $group->{'subgroups'};
        }
    }
}

sub delete_other_groups {
    my $groups = shift;
    my $to_delete = shift;

    my @tags = keys %$groups;

    # Add each group's supergroup to the delete list unless it exists.
    foreach my $tag (@tags) {
        my $group = $groups->{$tag};
        next unless exists $group->{'supergroup'};
        my $supergroup = $group->{'supergroup'};
        next unless defined $supergroup;

        $to_delete->{$supergroup} = 1 unless exists $groups->{$supergroup};
    }

    # For each group in deletion list, create a dummy group with an empty
    # file list to trigger job deletion.
    foreach my $tag (keys %$to_delete) {
        die 'Group "' . $tag . '" identified for deletion exists!' if exists $groups->{$tag};

        $groups->{$tag} = {
            files => [],
            obsid_subsysnr_list => [],
            task => undef,
            mode => undef,
        };
    }
}

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful,but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut
