#!/usr/bin/env perl

=head1 NAME

dpCapture - Scan current dir looking for files suitable for ingestion

=head1 SYNOPSIS

    dpCapture --id="<instance id>" -persist -archive JCMT

=head1 DESCRIPTION

The CADC processing environment provides a command for ingesting files
into the CADC archive following processing by the wrapper script.  The
command written here is a compatibility version to allow the data
processing system to be tested outside of the CADC environment.

The compatibility version scans the current directory and reports
the names of files that would ordinarily be ingested.

In the future the -persist option would be used to then move
those files into a transfer directory.

All suitable looking files are reported, not just those that
may have existed prior to running the wrapper.

=head1 ARGUMENTS

=over 4

=item B<--archive>

Name of the archive to be used for ingestion. Ordinarily this would
be "JCMT". If "CANFAR" is given then additional products will be
copied in addition to the standard .fits and .png files. These
will include ".sdf" and ORAC-DR log files.

=item B<--id>

Unique execution ID generated by external user. This is a compatibility
option and is not used.

=item B<-persist>

Indicate that files should be "persisted". Relevant files will be copied
to the transfer directory.

=item B<-transdir>

Override the CADC transfer drectory. Defaults to the standard CADC
transfer directory (/export/jcmtdata/ptransfer/new). This directory is used
to receive the output files if the "-persist" option is true.

If the directory does not exist but the parent does, an attempt will
be made to create it first. In CANFAR mode (see "archive" option) the
"id" will be added to the supplied transdir if "id" is given and an
"id" directory will be created if necessary. If this happens the
supplied "transdir" must exist.

=item B<-debug>

Write informational messages to standard error. Not supported by CADC.

=cut

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use File::Copy;
use File::Spec;
use File::Temp qw/tempfile/;
use Carp;

# Work out where we are so that we can run from a build directory
# and still find the JSA classes
use FindBin;
use lib $FindBin::RealBin."/lib";

use JSA::Files qw/looks_like_cadcfile scan_dir/;

my $CADCDIR = "/export/jcmtdata/ptransfer/new";

# Options
my ($help, $man, $version, $persist, $archive, $id, $transdir, $debug);
my $status = GetOptions(
    "help" => \$help,
    "man" => \$man,
    "version" => \$version,
    "id=s" => \$id,
    "archive=s" => \$archive,
    "debug" => \$debug,
    "persist" => \$persist,
    "transdir=s" => \$transdir,
);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($version) {
    print "dpCapture - compatibility capture script for jsawrapdr\n";
    exit;
}

if (defined($transdir)) {
    $transdir = File::Spec->rel2abs($transdir);
} else {
    $transdir = $CADCDIR;
}

# Regex
my $regexp;
my $persistall;
if (defined $archive && $archive =~ /canfar/i) {
    $persistall = 1;
    $regexp = qr/.*\.(fits|png|log|sdf)/;

    # Append recipe id to transdir if supplied
    if (defined $id) {
        $transdir = File::Spec->catdir( $transdir, $id );
    }
}
else {
    # Standard CADC compliant capture
    $regexp = qr/^(?:jcmt.*\.fits|jcmt.*\.png)$/;
}

# Sort out output directory
if ($persist) {
    unless (-d $transdir) {
        my $updir = _parentdir($transdir);
        if (-d $updir) {
            mkdir( $transdir ) || die "Could not create directory '$transdir' required to receive data files";
        }
        else {
            die "$transdir does not exist and neither does its parent. Can not copy data";
        }
    }
}

# Scan the directory for plausible fits or png files
my %files = scan_dir($regexp);

for my $f (sort keys %files) {
    if ($persistall || looks_like_cadcfile($f)) {
        if ($persist) {
            # Copy the file into a temporary file in the current directory,
            # then rename it.
            my ($fh, $filename) = tempfile();
            copy($f, $filename) or die "copy from $f to $filename failed: $!";
            move($filename, File::Spec->catfile($transdir, $f))
                or die "move from $filename to " . File::Spec->catfile( $transdir, $f ) . " failed: $!";

            print "Copied $f to " . File::Spec->catfile( $transdir, $f ) . "\n";

        }
        else {
            print "\tWould persist file $f\n";
        }
    }
}


exit 0;

# Given a directory path, returns the path of the parent.
#  $parent = _parentdir( $dir );

sub _parentdir {
    my $path = shift;
    my @dirs = File::Spec->splitdir($path);
    pop(@dirs);
    my $updir = File::Spec->catdir(@dirs);
    return $updir;
}


=head1 AUTHORS

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>,
Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>.

=head1 COPYRIGHT

Copyright (C) 2008-2009 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut
