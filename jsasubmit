#!/usr/bin/env starperl

=head1 NAME

jsasubmit - Submit a job to the CADC GridEngine for JSA processing.

=head1 SYNOPSIS

    jsasubmit -ut 20080705

=head1 DESCRIPTION

Submits a processing job to the CADC data processing system.

=head1 OPTIONS

=over 4

=item B<-debug>

Enable debug messages and do not actually submit a processing job. Also
disables emailing.

=item B<-help>

Print help information.

=item B<--add-info>

Update existing jobs without observation information.

=item B<-man>

Print full manual.

=item B<-noemail>

By default a mail message is sent with the job details. If this option is given
the message will be printed to standard output instead.

=item B<-priority>

Used to override the default priority for all jobs. Must be an integer between
-1023 and 1024. The default will be 1.

=item B<-project>

Name of a project to be processed.  Files are not verified to be present at
CADC in this mode.  If the "-ut" option is also supplied then night mode
will be used but selecting observations from this project.

=item B<-queue>

Can be used to override the queue that should be used for the data processing
at CADC. Can be left unset. Useful values are "JAC_REPROC" for low priority
reprocessing.

=item B<--task>

Name of data processing task. [default: "jcmt-nightly"]

=item B<-ut>

Specify the UT date to be processed.
Files to be processed are verified to be at CADC before a job will be submitted.

=item B<-version>

Print version information.

=back

=cut


use JAC::Setup qw/omp sybase/;

use strict;
use warnings;

use JSA::CADC_Copy;
use JSA::Submission qw/
    %DR_RECIPES %BAD_OBSIDSS %JUNK_OBSIDSS
    adjust_header adjust_header_freq assign_to_group
    determine_frame_class
    echo_messages find_observations get_obsidss
    log_message obs_is_fts2_or_pol2_RECIPE
    prepare_archive_db send_log_email
    write_log_file/;
use JSA::Proc qw/add_jsa_proc_jobs create_obsinfo_hash/;

use OMP::Info::Obs;
use OMP::Constants qw/:obs/;

use Getopt::Long;
use Pod::Usage;

prepare_archive_db();

# Handle command-line options.
my ($help, $man, $project, $ut, $version, $priority, $noemail, $debug,
    $queue, $only_info, $task);
my $status = GetOptions(
    "help"      => \$help,
    "man"       => \$man,
    "project=s" => \$project,
    "ut=s"      => \$ut,
    "priority=i"=> \$priority,
    "version"   => \$version,
    "debug"     => \$debug,
    "noemail"   => \$noemail,
    "queue=s"   => \$queue,
    'task=s'    => \$task,
    'add-info'  => \$only_info,
);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

if ($version) {
    print "Submit a job to the CADC GridEngine for JSA processing.\n";
    print " Source code revision: 0.01\n";
    exit;
}

if (not defined $task) {
    if (defined $project) {
        die 'Task name not given';
    }
    else {
        $task = 'jcmt-nightly';
    }
}

echo_messages($noemail || $debug);

$project = uc($project) if defined $project;
my ($mode, $grp) = find_observations($ut, $project, $priority, 'jsasubmit');

if (scalar(@{$grp->obs}) == 0) {
    log_message("No observations were retrieved from the database.\n");
}
else {
    log_message(scalar(@{$grp->obs}) . " observations were retrieved from the database.\n\n");

    # Group information hash for add_jsa_proc_jobs.
    my %groups;

    foreach my $obs ($grp->obs) {
        my $hdr = $obs->hdrhash;

        my $obstype = uc( $hdr->{'OBS_TYPE'} );
        my $instrume = uc( $hdr->{'INSTRUME'} );
        my $backend = uc( $hdr->{'BACKEND'} );
        my $project = uc( $hdr->{'PROJECT'} );


        # Don't submit EC jobs for processing except for special calibration observation project EC05
        if ($project =~ /EC/i and $project !~ /EC05/i) {
            log_message(sprintf "Skipped observation with OBSID %s because it is from engineering/comissioning project %s.\n",
                                $obs->obsid(), $project);
            next;
        }

        # No reduction recipe at CADC yet for (FTS|POL)-2.
        if (obs_is_fts2_or_pol2_RECIPE($backend, $obs->drrecipe())) {
            log_message(sprintf "Skipped observation with OBSID %s from FTS-2/POL-2 reduction %s\n",
                                $obs->obsid(), 'based on recipe value');
            next;
        }

        # We process SCIENCE and POINTING for SCUBA-2, and SCIENCE for
        # ACSIS and the DAS.
        unless (($instrume eq 'SCUBA-2' &&
                     ($obstype eq 'SCIENCE' ||
                      $obstype eq 'POINTING')) ||
                ($backend eq 'ACSIS' && $obstype eq 'SCIENCE') ||
                ($backend eq 'DAS'   && $obstype eq 'SCIENCE')) {
          next;
        }

        adjust_header($hdr);

        my $frameclass = determine_frame_class($obs);

        # Current default values for this observation in group handling and
        # recipe submission
        my %current;

        # If the observation is NOT GOOD we don't want to combine it with other
        # members of the group so we just want to submit it standalone.
        # REJECT status could arguably be included in full coadds but for now
        # we only combine GOOD.

        # Observations to be processed standalone need to be reduced in "obs" mode.

        # We do not process bad observations in PROJECT mode since we assume they have
        # already been done in NIGHT mode

        my $not_in_group;
        $current{mode} = $mode;
        if ($obs->status != OMP__OBS_GOOD) {
            # Do not care about group so add a disambiguater based on obsid
            log_message( "Observation with OBSID ". $obs->obsid ." is not good so will not be included in a group\n" );
            $not_in_group = 1;
            $current{mode} = "obs";

            # if the data are truly JUNK we do not want to ask CADC to process the data at
            # all since the chances are excellent that the pipeline will fail
            if ( $obs->status == OMP__OBS_JUNK ) {
                log_message("Observation is junk and so will not be processed at all\n");
                next;
            }

            # Skip to next observation unless we are in night mode
            if ($mode ne "night") {
                log_message("Not including this observation in $mode processing\n");
                next;
            }
        }

        # Set up recipe parameters and recipe overrides.
        # We only do this for non-calibrator science observations
        if ($obstype eq 'SCIENCE' && ! $hdr->{STANDARD}) {
            my $pid = $obs->projectid;
            if (defined $pid) {
                # Override the recipe?
                if ( exists $DR_RECIPES{$pid} ) {
                    $current{drparams} = $DR_RECIPES{$pid};
                }

                # We use this for all modes since the parameter file is relevant
                # for both night and project processing.
                $current{recpars} = "recpars-$pid.ini";
            }
        }

        my @subsystems = $obs->subsystems;

        for my $subsys (@subsystems) {
            my @all_obsidss = $subsys->obsidss;
            my $obsidss = $all_obsidss[0];

            die "Error determining an OBSIDSS for an observation. Can not proceed\n"
                unless defined $obsidss;

            # local copies
            my $obsidss_not_in_group = $not_in_group;
            my %obsidss_current = %current;

            if (exists $JUNK_OBSIDSS{$obsidss}) {
                log_message( "Subsystem $obsidss will not be processed in any way\n");
                next;
            }

            if (exists $BAD_OBSIDSS{$obsidss}) {
                log_message( "Subsystem $obsidss should not be included in group processing\n" );
                next if $mode ne "night";
                $obsidss_not_in_group = 1;
                $obsidss_current{mode} = "obs";
            }

            my $subsyshdr = $subsys->hdrhash;

            adjust_header_freq($subsyshdr);

            assign_to_group($instrume, $subsys->obsid, $frameclass, $obsidss_not_in_group,
                            $subsyshdr, \%obsidss_current, [$subsys->filename], \%groups,
                            undef, $task, create_obsinfo_hash($obs, $subsyshdr), 0, undef );
        }
    }

    add_jsa_proc_jobs(\%groups, $mode, $priority, $only_info, $debug);
}

write_log_file('jsasubmit', $ut, $project) unless $debug;

send_log_email('JSA Processing', $ut, $project)
    unless $noemail || $debug;

exit;

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful,but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut
